using Microsoft.AspNetCore.Http;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Globalization;
using System.IO;
using Libraries.Extensions;
using System.Linq;
using System.Reflection;
using System.Security.Cryptography;
using System.Text;
using System.Xml.Serialization;

namespace Libraries.Extensions
{
    public static class Extensions
    {
        /// <summary>Mã hóa chuỗi sang dạng MD5.</summary>
        /// <param name="input">Chuỗi cần mã hóa.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for AsMd5
        public static string AsMd5(this string input)
        {
            if (string.IsNullOrEmpty(input.Trim()))
                return "";
            using var md5 = MD5.Create();
            //
            var salt = $"S0m3R@d0m{input.Trim()}T#d@yC0";
            // Convert the input string to a byte array and compute the hash.
            var hash = md5.ComputeHash(Encoding.ASCII.GetBytes(salt));
            // Create a new Stringbuilder to collect the bytes
            // and create a string.
            var builder = new StringBuilder();
            // Loop through each byte of the hashed data
            // and format each one as a hexadecimal string.
            foreach (var h in hash)
            {
                builder.Append(h.ToString("x2"));
            }
            // Return the hexadecimal string.
            return builder.ToString();
        }

        /// <summary>Mã hóa chuỗi sang dạng SHA256.</summary>
        /// <param name="input">Chuỗi cần mã hóa.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for AsSha256
        public static string AsSha256(this string input)
        {
            if (string.IsNullOrEmpty(input.Trim()))
                return "";
            // Create a SHA256
            using var sha256 = SHA256.Create();
            var salt = $"S0m3R@d0m{input.Trim()}T#d@yC0";
            // ComputeHash - returns byte array
            var bytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(salt));
            // Convert byte array to a string
            var builder = new StringBuilder();
            for (int i = 0; i < bytes.Length; i++)
            {
                builder.Append(bytes[i].ToString("x2"));
            }
            // Return the hexadecimal string.
            return builder.ToString();
        }

        /// <summary>
        /// Encodes a string to base64, using default encoding.
        /// </summary>
        /// <param name="input">String to encode.</param>
        /// <returns>Encdoded string.</returns>
        public static string AsBase64Encode(this string input)
        {
            if (string.IsNullOrEmpty(input.Trim()))
                return "";
            return Convert.ToBase64String(Encoding.UTF8.GetBytes(input.Trim()));
        }

        /// <summary>
        /// Decodes a string from base64, using default encoding.
        /// </summary>
        /// <param name="input">base64 encoded string.</param>
        /// <returns>Decoded string.</returns>
        public static string AsBase64Decode(this string input)
        {
            if (string.IsNullOrEmpty(input.Trim()))
                return "";
            return Encoding.UTF8.GetString(Convert.FromBase64String(input.Trim()));
        }

        /// <summary>Ases the string.</summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for AsString
        public static string AsString(this short? value)
        {
            return !value.HasValue ? "" : value.Value.ToString(CultureInfo.InvariantCulture);
        }

        /// <summary>Ases the string.</summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for AsString
        public static string AsString(this int? value)
        {
            return !value.HasValue ? "" : value.Value.ToString(CultureInfo.InvariantCulture);
        }

        /// <summary>Ases the string.</summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for AsString
        public static string AsString(this long? value)
        {
            return !value.HasValue ? "" : value.Value.ToString(CultureInfo.InvariantCulture);
        }

        /// <summary>Ases the string.</summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for AsString
        public static string AsString(this decimal? value)
        {
            return !value.HasValue ? "" : value.Value.ToString(CultureInfo.InvariantCulture);
        }

        /// <summary>Ases the string.</summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for AsString
        public static string AsString(this object value)
        {
            return value == null ? "" : value.ToString();
        }

        /// <summary>Ases the string.</summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for AsString
        public static string AsString(this DateTime? value)
        {
            if (!value.HasValue || value.Value == DateTime.MinValue)
                return "";
            return value.Value.ToString(CultureInfo.InvariantCulture);
        }

        /// <summary>Ases the string.</summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for AsString
        public static string AsString(this DateTime value)
        {
            if (value == DateTime.MinValue)
                return "";
            return value.ToString(CultureInfo.InvariantCulture);
        }

        /// <summary>Ases the short date string.</summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for AsShortDateString
        public static string AsShortDateString(this DateTime? value)
        {
            if (!value.HasValue || value.Value == DateTime.MinValue)
                return "";
            return value.Value.ToString("dd/MM/yyyy");
        }

        /// <summary>Ases the short date string.</summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for AsShortDateString
        public static string AsShortDateString(this DateTime value)
        {
            if ( value == DateTime.MinValue)
                return "";
            return value.ToString("dd/MM/yyyy");
        }

        /// <summary>Ases the short date time string.</summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for AsShortDateTimeString
        public static string AsShortDateTimeString(this DateTime? value)
        {
            if (!value.HasValue || value.Value == DateTime.MinValue)
                return "";
            return value.Value.ToString("dd/MM/yyyy HH:mm");
        }

        /// <summary>Ases the long date time string.</summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for AsLongDateTimeString
        public static string AsLongDateTimeString(this DateTime? value)
        {
            if (!value.HasValue || value.Value == DateTime.MinValue)
                return "";
            return value.Value.ToString("dd/MM/yyyy HH:mm:ss");
        }

        /// <summary>Ases the long date time string.</summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for AsLongDateTimeString
        public static string AsLongDateTimeString(this DateTime value)
        {
            if (value == DateTime.MinValue)
                return "";
            return value.ToString("dd/MM/yyyy HH:mm:ss");
        }

        /// <summary>Ases the int32.</summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for AsInt32
        public static int AsInt32(this string value)
        {
            if (string.IsNullOrEmpty(value))
                return 0;
            return int.TryParse(value, out var i) ? i : 0;
        }

        /// <summary>Ases the int32.</summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for AsInt32
        public static int AsInt32(this object value)
        {
            if (string.IsNullOrEmpty(value.AsString()))
                return 0;
            return int.TryParse(value.AsString(), out var i) ? i : 0;
        }

        /// <summary>Ases the int64.</summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for AsInt64
        public static long AsInt64(this string value)
        {
            if (string.IsNullOrEmpty(value))
                return 0;
            return long.TryParse(value, out var i) ? i : 0;
        }

        /// <summary>Ases the int64.</summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for AsInt64
        public static long AsInt64(this object value)
        {
            if (string.IsNullOrEmpty(value.AsString()))
                return 0;
            return long.TryParse(value.AsString(), out var i) ? i : 0;
        }

        /// <summary>Chuẩn hóa chuỗi.</summary>
        /// <param name="str">chuỗi cần chuẩn hóa.</param>
        /// <param name="length">thêm số không đằng trước str để đủ độ dài bằng length.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ChuanHoaStr
        public static string ChuanHoaStr(string str, int length)
        {
            str = str.Trim();
            while (str.Length < length)
            {
                str = "0" + str;
            }
            return str;
        }

        /// <summary>
        /// Siinh mã thửa từ mã xã, số tờ số thửa
        /// </summary>
        /// <param name="strMaXa"></param>
        /// <param name="strSoTo"></param>
        /// <param name="strSoThua"></param>
        /// <returns></returns>
        public static string SinhMaThua(string strMaXa, string strSoTo, string strSoThua)
        {
            return ChuanHoaStr(strMaXa, 5) + ChuanHoaStr(strSoTo, 4) + ChuanHoaStr(strSoThua, 5);
        }

        public static string ToXml(this object obj)
        {
            using (var stringWriter = new System.IO.StringWriter())
            {
                var serializer = new XmlSerializer(obj.GetType());
                serializer.Serialize(stringWriter, obj);
                return stringWriter.ToString();
            }
        }

        public static string ToDescription(this Enum genericEnum)
        {
            var genericEnumType = genericEnum.GetType();
            var memberInfo = genericEnumType.GetMember(genericEnum.ToString());
            if ((memberInfo.Length > 0))
            {
                var attributes = memberInfo[0].GetCustomAttributes(typeof(DescriptionAttribute), false);
                if ((attributes.Any()))
                {
                    return ((DescriptionAttribute)attributes.ElementAt(0)).Description;
                }
            }
            return genericEnum.ToString();
        }

        public static IEnumerable<T> Traverse<T>(this IEnumerable<T> source, Func<T, IEnumerable<T>> childrenSelector)
        {
            var stack = new Stack<T>(source);
            while (stack.Any())
            {
                var next = stack.Pop();
                yield return next;
                foreach (var child in childrenSelector(next))
                    stack.Push(child);
            }
        }

        public static DataTable ToDataTable<T>(this List<T> data)
        {
            PropertyDescriptorCollection props =
                TypeDescriptor.GetProperties(typeof(T));
            DataTable table = new DataTable();
            for (int i = 0; i < props.Count; i++)
            {

                PropertyDescriptor prop = props[i];
                //table.Columns.Add(prop.Name);
                table.Columns.Add(prop.Name, prop.PropertyType);

            }
            object[] values = new object[props.Count];
            foreach (T item in data)
            {
                for (int i = 0; i < values.Length; i++)
                {
                    values[i] = props[i].GetValue(item);
                }
                table.Rows.Add(values);
            }
            return table;
        }

        // NOTE: returns Descriptor if there is no Description
        //private static string GetEnumDescription(this Enum value)
        //{
        //    FieldInfo fi = value.GetType().GetField(value.ToString());
        //    DescriptionAttribute[] attributes = (DescriptionAttribute[])fi.GetCustomAttributes(typeof(DescriptionAttribute), false);
        //    if (attributes != null && attributes.Length > 0)
        //        return attributes[0].Description;
        //    else
        //        return value.ToString();
        //}
        public static string GetEnumDescription(this Enum enumValue)
        {
            var fieldInfo = enumValue.GetType().GetField(enumValue.ToString());

            var descriptionAttributes = (DescriptionAttribute[])fieldInfo.GetCustomAttributes(typeof(DescriptionAttribute), false);

            return descriptionAttributes.Length > 0 ? descriptionAttributes[0].Description : enumValue.ToString();
        }
        public static bool IsAjaxRequest(this HttpRequest request)
        {
            if (request == null)
                throw new ArgumentNullException(nameof(request));

            if (request.Headers != null)
                return request.Headers["X-Requested-With"] == "XMLHttpRequest";
            return false;
        }
        public static async System.Threading.Tasks.Task<Response<string>> SaveImage(this IFormFile file, string path)
        {
            var objReturn = new Response<string>();
            try
            {
                using (var stream = new FileStream(path, FileMode.Create))
                {                    
                    await file.CopyToAsync(stream);
                }
                objReturn.Success = true;
            }
            catch(Exception ex)
            {
                objReturn.Success = false;
                objReturn.Data = ex.ToString();
            }
            return objReturn;
        }

    }
}
